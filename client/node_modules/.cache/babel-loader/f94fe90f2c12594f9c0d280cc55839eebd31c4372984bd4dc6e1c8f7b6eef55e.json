{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\richmar\\\\awesometodos\\\\client\\\\src\\\\Todo.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Todo(props) {\n  // Define the updateTodo function inside Todo component\n  const updateTodo = async (todoId, todoStatus) => {\n    const res = await fetch(`/api/todos/${todoId}`, {\n      method: \"PUT\",\n      // Using PUT to update the entire resource\n      body: JSON.stringify({\n        status: !todoStatus\n      }),\n      // Toggle the status\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const json = await res.json();\n    if (json.acknowledged) {\n      // Update the todos list in state if the update was successful\n      props.setTodos(currentTodos => {\n        return currentTodos.map(currentTodo => {\n          if (currentTodo._id === todoId) {\n            return {\n              ...currentTodo,\n              status: !currentTodo.status\n            }; // Toggle status\n          }\n          return currentTodo; // Return the rest of the todos unchanged\n        });\n      });\n    }\n  };\n\n  // Define the deleteTodo function inside the Todo component\n  const deleteTodo = async todoId => {\n    const res = await fetch(`/api/todos/${todoId}`, {\n      method: \"DELETE\" // Using DELETE method to remove the todo\n    });\n    const json = await res.json();\n    if (json.acknowledged) {\n      // Remove the todo from the list in state if deletion was successful\n      props.setTodos(currentTodos => currentTodos.filter(todo => todo._id !== todoId));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.todo.todo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mutations\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"todo__status\",\n        onClick: () => updateTodo(props.todo._id, props.todo.status),\n        children: props.todo.status ? \"‚òë\" : \"‚òê\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"todo__delete\",\n        onClick: () => deleteTodo(props.todo._id) // Call deleteTodo when button is clicked\n        ,\n        children: \"\\uD83D\\uDDD1\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 7\n  }, this);\n}\n_c = Todo;\nvar _c;\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"names":["Todo","props","updateTodo","todoId","todoStatus","res","fetch","method","body","JSON","stringify","status","headers","json","acknowledged","setTodos","currentTodos","map","currentTodo","_id","deleteTodo","filter","todo","_jsxDEV","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/richmar/awesometodos/client/src/Todo.jsx"],"sourcesContent":["export default function Todo(props) {\r\n    // Define the updateTodo function inside Todo component\r\n    const updateTodo = async (todoId, todoStatus) => {\r\n      const res = await fetch(`/api/todos/${todoId}`, {\r\n        method: \"PUT\",  // Using PUT to update the entire resource\r\n        body: JSON.stringify({ status: !todoStatus }),  // Toggle the status\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n  \r\n      const json = await res.json();\r\n  \r\n      if (json.acknowledged) {\r\n        // Update the todos list in state if the update was successful\r\n        props.setTodos(currentTodos => {\r\n          return currentTodos.map((currentTodo) => {\r\n            if (currentTodo._id === todoId) {\r\n              return { ...currentTodo, status: !currentTodo.status }; // Toggle status\r\n            }\r\n            return currentTodo;  // Return the rest of the todos unchanged\r\n          });\r\n        });\r\n      }\r\n    };\r\n  \r\n    // Define the deleteTodo function inside the Todo component\r\n    const deleteTodo = async (todoId) => {\r\n      const res = await fetch(`/api/todos/${todoId}`, {\r\n        method: \"DELETE\",  // Using DELETE method to remove the todo\r\n      });\r\n  \r\n      const json = await res.json();\r\n  \r\n      if (json.acknowledged) {\r\n        // Remove the todo from the list in state if deletion was successful\r\n        props.setTodos(currentTodos => currentTodos.filter(todo => todo._id !== todoId));\r\n      }\r\n    };\r\n  \r\n    return (\r\n      <div className=\"todo\">\r\n        <p>{props.todo.todo}</p>\r\n        <div className=\"mutations\">\r\n          <button\r\n            className=\"todo__status\"\r\n            onClick={() => updateTodo(props.todo._id, props.todo.status)}\r\n          >\r\n            {(props.todo.status) ? \"‚òë\" : \"‚òê\"}\r\n          </button>\r\n          <button\r\n            className=\"todo__delete\"\r\n            onClick={() => deleteTodo(props.todo._id)}  // Call deleteTodo when button is clicked\r\n          >\r\n            üóëÔ∏è\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  "],"mappings":";;AAAA,eAAe,SAASA,IAAIA,CAACC,KAAK,EAAE;EAChC;EACA,MAAMC,UAAU,GAAG,MAAAA,CAAOC,MAAM,EAAEC,UAAU,KAAK;IAC/C,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,cAAcH,MAAM,EAAE,EAAE;MAC9CI,MAAM,EAAE,KAAK;MAAG;MAChBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,MAAM,EAAE,CAACP;MAAW,CAAC,CAAC;MAAG;MAChDQ,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,MAAMC,IAAI,GAAG,MAAMR,GAAG,CAACQ,IAAI,CAAC,CAAC;IAE7B,IAAIA,IAAI,CAACC,YAAY,EAAE;MACrB;MACAb,KAAK,CAACc,QAAQ,CAACC,YAAY,IAAI;QAC7B,OAAOA,YAAY,CAACC,GAAG,CAAEC,WAAW,IAAK;UACvC,IAAIA,WAAW,CAACC,GAAG,KAAKhB,MAAM,EAAE;YAC9B,OAAO;cAAE,GAAGe,WAAW;cAAEP,MAAM,EAAE,CAACO,WAAW,CAACP;YAAO,CAAC,CAAC,CAAC;UAC1D;UACA,OAAOO,WAAW,CAAC,CAAE;QACvB,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF,CAAC;;EAED;EACA,MAAME,UAAU,GAAG,MAAOjB,MAAM,IAAK;IACnC,MAAME,GAAG,GAAG,MAAMC,KAAK,CAAC,cAAcH,MAAM,EAAE,EAAE;MAC9CI,MAAM,EAAE,QAAQ,CAAG;IACrB,CAAC,CAAC;IAEF,MAAMM,IAAI,GAAG,MAAMR,GAAG,CAACQ,IAAI,CAAC,CAAC;IAE7B,IAAIA,IAAI,CAACC,YAAY,EAAE;MACrB;MACAb,KAAK,CAACc,QAAQ,CAACC,YAAY,IAAIA,YAAY,CAACK,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACH,GAAG,KAAKhB,MAAM,CAAC,CAAC;IAClF;EACF,CAAC;EAED,oBACEoB,OAAA;IAAKC,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBF,OAAA;MAAAE,QAAA,EAAIxB,KAAK,CAACqB,IAAI,CAACA;IAAI;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBN,OAAA;MAAKC,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxBF,OAAA;QACEC,SAAS,EAAC,cAAc;QACxBM,OAAO,EAAEA,CAAA,KAAM5B,UAAU,CAACD,KAAK,CAACqB,IAAI,CAACH,GAAG,EAAElB,KAAK,CAACqB,IAAI,CAACX,MAAM,CAAE;QAAAc,QAAA,EAE3DxB,KAAK,CAACqB,IAAI,CAACX,MAAM,GAAI,GAAG,GAAG;MAAG;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CAAC,eACTN,OAAA;QACEC,SAAS,EAAC,cAAc;QACxBM,OAAO,EAAEA,CAAA,KAAMV,UAAU,CAACnB,KAAK,CAACqB,IAAI,CAACH,GAAG,CAAE,CAAE;QAAA;QAAAM,QAAA,EAC7C;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACE,EAAA,GA3DqB/B,IAAI;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}